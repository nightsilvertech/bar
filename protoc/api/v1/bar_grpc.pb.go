// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BarServiceClient is the client API for BarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarServiceClient interface {
	AddBar(ctx context.Context, in *Bar, opts ...grpc.CallOption) (*Bar, error)
	EditBar(ctx context.Context, in *Bar, opts ...grpc.CallOption) (*Bar, error)
	DeleteBar(ctx context.Context, in *Select, opts ...grpc.CallOption) (*Bar, error)
	GetDetailBar(ctx context.Context, in *Select, opts ...grpc.CallOption) (*Bar, error)
	GetAllBar(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Bars, error)
}

type barServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarServiceClient(cc grpc.ClientConnInterface) BarServiceClient {
	return &barServiceClient{cc}
}

func (c *barServiceClient) AddBar(ctx context.Context, in *Bar, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/api.v1.BarService/AddBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barServiceClient) EditBar(ctx context.Context, in *Bar, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/api.v1.BarService/EditBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barServiceClient) DeleteBar(ctx context.Context, in *Select, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/api.v1.BarService/DeleteBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barServiceClient) GetDetailBar(ctx context.Context, in *Select, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/api.v1.BarService/GetDetailBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barServiceClient) GetAllBar(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Bars, error) {
	out := new(Bars)
	err := c.cc.Invoke(ctx, "/api.v1.BarService/GetAllBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarServiceServer is the server API for BarService service.
// All implementations should embed UnimplementedBarServiceServer
// for forward compatibility
type BarServiceServer interface {
	AddBar(context.Context, *Bar) (*Bar, error)
	EditBar(context.Context, *Bar) (*Bar, error)
	DeleteBar(context.Context, *Select) (*Bar, error)
	GetDetailBar(context.Context, *Select) (*Bar, error)
	GetAllBar(context.Context, *Pagination) (*Bars, error)
}

// UnimplementedBarServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBarServiceServer struct {
}

func (UnimplementedBarServiceServer) AddBar(context.Context, *Bar) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBar not implemented")
}
func (UnimplementedBarServiceServer) EditBar(context.Context, *Bar) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBar not implemented")
}
func (UnimplementedBarServiceServer) DeleteBar(context.Context, *Select) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBar not implemented")
}
func (UnimplementedBarServiceServer) GetDetailBar(context.Context, *Select) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailBar not implemented")
}
func (UnimplementedBarServiceServer) GetAllBar(context.Context, *Pagination) (*Bars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBar not implemented")
}

// UnsafeBarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarServiceServer will
// result in compilation errors.
type UnsafeBarServiceServer interface {
	mustEmbedUnimplementedBarServiceServer()
}

func RegisterBarServiceServer(s grpc.ServiceRegistrar, srv BarServiceServer) {
	s.RegisterService(&BarService_ServiceDesc, srv)
}

func _BarService_AddBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServiceServer).AddBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BarService/AddBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServiceServer).AddBar(ctx, req.(*Bar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarService_EditBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServiceServer).EditBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BarService/EditBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServiceServer).EditBar(ctx, req.(*Bar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarService_DeleteBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Select)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServiceServer).DeleteBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BarService/DeleteBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServiceServer).DeleteBar(ctx, req.(*Select))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarService_GetDetailBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Select)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServiceServer).GetDetailBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BarService/GetDetailBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServiceServer).GetDetailBar(ctx, req.(*Select))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarService_GetAllBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServiceServer).GetAllBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.BarService/GetAllBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServiceServer).GetAllBar(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

// BarService_ServiceDesc is the grpc.ServiceDesc for BarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.BarService",
	HandlerType: (*BarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBar",
			Handler:    _BarService_AddBar_Handler,
		},
		{
			MethodName: "EditBar",
			Handler:    _BarService_EditBar_Handler,
		},
		{
			MethodName: "DeleteBar",
			Handler:    _BarService_DeleteBar_Handler,
		},
		{
			MethodName: "GetDetailBar",
			Handler:    _BarService_GetDetailBar_Handler,
		},
		{
			MethodName: "GetAllBar",
			Handler:    _BarService_GetAllBar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bar.proto",
}
